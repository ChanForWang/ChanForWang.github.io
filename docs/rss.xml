<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>INDA HOUSE</title><link>https://ChanForWang.github.io</link><description>去有风的地方</description><copyright>INDA HOUSE</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://i.ibb.co/dkKbsNN/logo.png</url><title>avatar</title><link>https://ChanForWang.github.io</link></image><lastBuildDate>Tue, 11 Jun 2024 03:47:01 +0000</lastBuildDate><managingEditor>INDA HOUSE</managingEditor><ttl>60</ttl><webMaster>INDA HOUSE</webMaster><item><title>如何不使用Pjax令Aplayer实现播放不中断</title><link>https://ChanForWang.github.io/post/ru-he-bu-shi-yong-Pjax-ling-Aplayer-shi-xian-bo-fang-bu-zhong-duan.html</link><description>## 前言&#13;
&#13;
因为我很喜欢在个人博客中实现音乐播放功能，而aplayer则是这其中一个超级轻便简洁的网页播放器，但有个问题就是：&#13;
&gt;[!Warning]&#13;
&gt;一旦页面刷新或页面跳转新链接，整个音乐的播放状态会被重置&#13;
&#13;
因此，我一直在寻找一个方式如何能解决此问题，从中我了解到了Pjax。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/ru-he-bu-shi-yong-Pjax-ling-Aplayer-shi-xian-bo-fang-bu-zhong-duan.html</guid><pubDate>Mon, 10 Jun 2024 11:04:09 +0000</pubDate></item><item><title>iframe-文章插入html标签</title><link>https://ChanForWang.github.io/post/iframe--wen-zhang-cha-ru-html-biao-qian.html</link><description>b站&#13;
&#13;
`Gmeek-html&lt;iframe src='//player.bilibili.com/player.html?isOutside=true&amp;aid=1604800941&amp;bvid=BV1qm421M7Xs&amp;cid=1557311907&amp;p=1&amp;autoplay=0' scrolling='no' border='0' frameborder='no' framespacing='0' allowfullscreen='true' width='100%' height='460px'&gt;&lt;/iframe&gt;`&#13;
&#13;
&#13;
### 参考&#13;
https://blog.meekdai.com/post/%E3%80%90Gmeek-jin-jie-%E3%80%91-wen-zhang-cha-ru-html-biao-qian.html。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/iframe--wen-zhang-cha-ru-html-biao-qian.html</guid><pubDate>Thu, 06 Jun 2024 01:20:32 +0000</pubDate></item><item><title>如何将上游Git仓库的更新合并到你的Fork中</title><link>https://ChanForWang.github.io/post/ru-he-jiang-shang-you-Git-cang-ku-de-geng-xin-he-bing-dao-ni-de-Fork-zhong.html</link><description>## 引言&#13;
&#13;
在开源世界中，Git的fork功能是一个强大的工具，它允许开发者复制一个仓库到自己的账户下，进行修改和实验，而不会影响原始仓库。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/ru-he-jiang-shang-you-Git-cang-ku-de-geng-xin-he-bing-dao-ni-de-Fork-zhong.html</guid><pubDate>Wed, 05 Jun 2024 06:59:13 +0000</pubDate></item><item><title>投资体系</title><link>https://ChanForWang.github.io/post/tou-zi-ti-xi.html</link><description>## 前言&#13;
在深入探讨个人投资体系之前，先探讨下个人**投资目标**是什么：&#13;
&#13;
1.每年约+12%的ROI回报→资产配置&#13;
2.长期：FIRE退休+100w before 30s&#13;
&#13;
## 一、坚持“价值投资”⇒ 长期持有（基本面）→ 4M&#13;
&#13;
- Meaning：公司是干嘛的&#13;
- Moat：护城河（竞争优势）&#13;
- Management：管理层/团队（人）&#13;
- **Margin of Safety**：价格 vs 价值&#13;
&#13;
## 二、分散化的**集中**（5-8只标的）→资产配置&#13;
&#13;
- 过于分散，会影响ROI ⇒ 前提：能力圈，深入分析！&#13;
- 挥棒球理论，等待成功率最高的机会，再出击！&#13;
- 一生中，最重要的击棒次数限制在20次内！&#13;
- 重点还是：**投资组合配置（不相关性）**&#13;
&#13;
## 三、用第二层次思维（逆向思维）：&#13;
&#13;
- 别人贪婪我恐惧！&#13;
- × 追涨杀跌&#13;
- × 追热点（从众）⇒ 只会获得一般收益，不会超额收益；且往往已有泡沫迹象！&#13;
&#13;
## 四、耐心&#13;
&#13;
- 耐心持有 ⇒ 长期，才会显现出差距，价值也才会突显&#13;
- 耐心等待机会：&#13;
⇒ 不要为了投而投（压根没进行深入了解），而是宁愿持有现金，耐心等机会&#13;
⇒ 挥“**棒球理论**”， 只需击中最有“把握的”，then大力击打（重注）！&#13;
&#13;
## 五、价格 vs 价值&#13;
&#13;
- 安全边际要大！！&#13;
⇒ 否则，即使是买入了一家好的公司，但买入的价格过高，依旧是失败的投资！&#13;
&#13;
- It's far better to buy a **Wonderful Company at a Fair Price** than a fair company at a wonderful price&#13;
⇒ 如果一家企业你不愿意一辈子持有，那就不要买入（用**收购思维**！）&#13;
    &#13;
## 六、持有现金！⇒ 弹药：Never 满仓！&#13;
&#13;
- 目的：等机会出现时，能有弹药吸纳&#13;
- 教训：就如同疫情03/2020，不断熔断，却被套住，没多余的资金吸纳好的投资标的！&#13;
&#13;
## 七、了解“交易的逻辑” ⇒ 买入卖出的原因！&#13;
&#13;
- **价值投资**：基于基本面&#13;
  - 买入：1. 基本面良好（收购心态）、2. 安全边际大（价格vs价值）、3. 潜力（成长性）&#13;
  - 卖出：1. 基本面恶化  2. 泡沫过大（泡沫来临前上车，破灭前下车⇒锁定利润） 3. 有更好的投资标的！&#13;
&#13;
- **投机**：基于短期趋势/热点（心理）⇒ 严格订立&amp;执行**止盈/止损点** ⇒ 追求盈利，但不求大赚！&#13;
&#13;
## 八、避免“处置效应” &#13;
&#13;
- 卖出盈利的，却一直持有亏损的(被套的) ⇒ 损失规避心理！&#13;
&#13;
- 重点还是回到No.7，要了解买入卖出逻辑&#13;
  - so在下跌时，该不该继续持有，继续逢低买进；还是止损卖出：&#13;
&#13;
  1. 要看交易逻辑：是投资or投机&#13;
  2. 投资的话：基本面有没有变化（恶化）、成长潜力是不是变了，商业模式/环境是否变了 ⇒ ie： 基金，不是越跌越买，要看它的基本面有没有恶化了！&#13;
  3. 投机的话：严格执行止盈止损位！&#13;
（止盈：不要觉得后悔少赚了，这是一种纪律！一种认知！可以反思，是不是还可以做得更好，但一定要严格执行！）&#13;
&#13;
## 九、追求合理、明确的盈利目标&#13;
&#13;
- 这样在审视时，才知道自己的组合的表现是否符合预期⇒ 就像目标进度（可对比，追踪！）&#13;
  - 如ETF（跟随大盘的），目标就是跑赢通胀&#13;
  - 如股票，目标要跑赢大盘指数：SP500，HS index&#13;
  - 年回报率+12%&#13;
&#13;
## 十、定期**复盘/审视** 投资组合&amp;回报表现&#13;
&#13;
- 跟自己的初设的心理回报预期做比较！&#13;
- 年回报+12%&#13;
- 跟 大盘/通胀 做比较！&#13;
  - 每季度一小审&#13;
  - 半年一中审&#13;
  - 一年一大审&#13;
&#13;
![525628b7ee0437237a7459f677d9713](https://github.com/ChanForWang/ChanForWang.github.io/assets/52204491/195f8e4a-901f-4f6a-a8e6-b58d5d71bb38)&#13;
&#13;
。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/tou-zi-ti-xi.html</guid><pubDate>Tue, 04 Jun 2024 09:33:46 +0000</pubDate></item><item><title>如何巧妙利用上瘾机制实现个人目标</title><link>https://ChanForWang.github.io/post/ru-he-qiao-miao-li-yong-shang-yin-ji-zhi-shi-xian-ge-ren-mu-biao.html</link><description>### 背景&#13;
&#13;
以下场景对你来说是否毫不陌生：&#13;
&#13;
一个人闲暇的时候，无聊和孤独感袭来，手不由自主的就拿起手机，要么打开“某音”刷起短视频，要么就点开游戏，和朋友相约开黑，要么就是在“某博”上看着八卦，把瓜吃的津津有味而忘却时间不自停...&#13;
&#13;
如果你也有过相似的经历，那很明显，大家已经对这些东西就如同对烟酒和毒品一般而“上瘾”了。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/ru-he-qiao-miao-li-yong-shang-yin-ji-zhi-shi-xian-ge-ren-mu-biao.html</guid><pubDate>Thu, 30 May 2024 08:18:00 +0000</pubDate></item><item><title>4月复盘-2024(by 5月中)</title><link>https://ChanForWang.github.io/post/4-yue-fu-pan--2024%28by%205-yue-zhong-%29.html</link><description>这是自从自己建立计划以来，首次的月度复盘。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/4-yue-fu-pan--2024%28by%205-yue-zhong-%29.html</guid><pubDate>Fri, 10 May 2024 09:37:16 +0000</pubDate></item><item><title>投资理财，是为了什么</title><link>https://ChanForWang.github.io/post/tou-zi-li-cai-%EF%BC%8C-shi-wei-le-shen-me.html</link><description>之前，看到一篇公众号，提出一个很好的问题：你投资理财，到底是为了什么？！&#13;
也许你会说，这不废话嘛，当然是为了财富自由，早日退休吖！&#13;
&#13;
这个回答表面乍一看没啥问题，但事实上，这样的回答是十分的含糊不清，让人摸不着头脑的（答案缺失焦点，压根不知要干嘛，换句话说，不知道如何执行和实现这所谓“目标”）。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/tou-zi-li-cai-%EF%BC%8C-shi-wei-le-shen-me.html</guid><pubDate>Wed, 24 Apr 2024 09:26:09 +0000</pubDate></item><item><title>邮件定期发送--自动化python脚本</title><link>https://ChanForWang.github.io/post/you-jian-ding-qi-fa-song----zi-dong-hua-python-jiao-ben.html</link><description>因为工作原因，每周周四团队的秘书就会要求我们更新最新一个礼拜的weekly schedule (excel)，透过邮件发给她，因为除了修改excel的内容，其他可谓都是重复性的动作(写发邮件，上传附件等)，事虽小，但很浪费时间，且自己也总是忘记；&#13;
&#13;
因此今天上班突发奇想：能不能创建一个自动化的流程来自动执行这一切，自己只需更新个人shedule就好！？&#13;
&#13;
然后说干就干，仔细思考了下整个流程逻辑：&#13;
1.每周四下午2点30分，自动提醒我要更新weekly schedule--&gt;提示框&#13;
2.随后自动帮我打开对应Excel文档，让我更新--&gt;open excel file&#13;
3.当我完成更新后，提示我是否发送邮件--&gt;提示框&#13;
4.Yes：则检查Outlook是否开启，未开启则帮我先启动再以附件形式发送，并提醒已发送完成！&#13;
5.No：则没事，并提醒已取消发送！&#13;
&#13;
代码如下：&#13;
&#13;
```&#13;
import schedule&#13;
import time&#13;
import os&#13;
import tkinter as tk&#13;
from tkinter import messagebox&#13;
import win32com.client as win32&#13;
import psutil&#13;
&#13;
def show_reminder(msg):&#13;
    root = tk.Tk()&#13;
    root.withdraw() # 隐藏窗口&#13;
    messagebox.showinfo('Notification',msg)&#13;
    root.destroy()&#13;
&#13;
def open_excel():&#13;
    os.startfile(r'C:\Users\James Chan\OneDrive - Pico Group\Desktop\HKGMC-Projects\z.Weekly Schedule-James\Weekly Schedule-James.xlsx')&#13;
&#13;
def send_email():&#13;
    # 检查Outlook是否已经打开&#13;
    outlook_running = False&#13;
    for proc in psutil.process_iter(['name']):&#13;
        if proc.info['name'] == 'OLK.EXE': #可透过task manager来查看名称！&#13;
            outlook_running = True&#13;
            break&#13;
&#13;
    # 如果Outlook没有运行，启动Outlook(new)&#13;
    if not outlook_running:&#13;
        os.startfile(r'C:\Program Files\WindowsApps\Microsoft.OutlookForWindows_1.2024.403.300_x64__8wekyb3d8bbwe\olk.exe')&#13;
        print('Outlook is not running. Starting Outlook...')&#13;
        # 等待Outlook启动，这里假设Outlook启动需要大约10秒&#13;
        time.sleep(10)&#13;
&#13;
    try:&#13;
        outlook = win32.Dispatch('outlook.application')&#13;
        mail = outlook.CreateItem(0)&#13;
        mail.Subject = 'Weekly Schedule Testing'&#13;
        mail.Body = 'Dear Josephine,\n\nAttached please find my latest weekly schedule, thanks.\n\nBest Regards\nJames Chan'&#13;
        mail.To = 'josephine.tsang@pico.com'&#13;
        mail.CC = 'james.chan@pico.com'&#13;
        mail.Attachments.Add(r'C:\Users\James Chan\OneDrive - Pico Group\Desktop\HKGMC-Projects\z.Weekly Schedule-James\Weekly Schedule-James.xlsx')&#13;
        mail.Send()&#13;
&#13;
    except Exception as e:&#13;
        print(f'Failed to send email: {e}')&#13;
&#13;
def show_2nd_reminder_and_send_email():&#13;
    root = tk.Tk()&#13;
    root.withdraw()&#13;
    response = messagebox.askyesno('提醒', '是否发送邮件给Jo？')&#13;
    root.destroy()&#13;
    if response:&#13;
        send_email()&#13;
        show_reminder('已发送完成！')&#13;
    else:&#13;
        show_reminder('已取消发送！')&#13;
&#13;
def job():&#13;
    # 这里放置你的任务代码&#13;
    show_reminder('记得发送本周weekly schedule')&#13;
    open_excel()&#13;
    time.sleep(5)  # 等待5秒&#13;
    show_2nd_reminder_and_send_email()&#13;
&#13;
schedule.every().thursday.at('14:30').do(job)&#13;
while True:&#13;
    schedule.run_pending()&#13;
    time.sleep(21600) #每隔6小时检查一次：6*60*60s；不用担心当时间到了1430，而程序还在sleep中不执行，因为run_pending解决了这个事！&#13;
&#13;
```&#13;
&#13;
代码部分是完成了，但由于这只是个python script，无法做到24小时全天候监听事件发生，除非一直打开并运行这个python.py；&#13;
但显然这样的做法太傻！&#13;
&#13;
所以经过一番研究，本想采用windows的service来后台执行，但一直报错，所以摒弃这个方式，并采取第二种曲线救国方式：&#13;
**Task Scheduler**;&#13;
&#13;
透过设置运行条件为：登录系统就自动执行程序来自启动运行，可以省却自己去启动脚本的繁琐过程！&#13;
&#13;
但因为python.py是脚本，虽然task scheduler也可以运行，但不够简洁和无法满足我需要它在后台运行的需求，因此需要将脚本文件透过以下命令转换为无窗口运行的exe程序：&#13;
&#13;
`pyinstaller --onefile --noconsole AutoEmail.py`&#13;
&#13;
这样就会将py文件转换成exe文件，最后task scheduler设置完毕后，每次自动登录系统，便会在后台自启动运行！&#13;
&#13;
![image](https://github.com/ChanForWang/ChanForWang.github.io/assets/52204491/ef915d93-e8a7-4f9c-bf50-946285a1beb5)&#13;
![image](https://github.com/ChanForWang/ChanForWang.github.io/assets/52204491/cc094559-2111-4d77-886d-d1bb1c264f0a)&#13;
&#13;
。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/you-jian-ding-qi-fa-song----zi-dong-hua-python-jiao-ben.html</guid><pubDate>Mon, 22 Apr 2024 08:48:06 +0000</pubDate></item><item><title>How to customize my personal blog</title><link>https://ChanForWang.github.io/post/How%20to%20customize%20my%20personal%20blog.html</link><description>## Repository: ChanForWang.github.io&#13;
&#13;
`config.json: update the configuration of the blog， i.e: Name of blog.`&#13;
&#13;
`&gt;github/workflow&gt;Gmeek.yml（Action自动化执行的代码）&gt;Name: Clone source code: 将链接改为自己的github：https://github.com/ChanForWang/Gmeek.git /opt/Gmeek`&#13;
&#13;
## Repository: Gmeek&#13;
&#13;
1.将此仓库git clone到本地&#13;
2.templates：爆改的一切在这&#13;
3.geek.py 是整个逻辑部分&#13;
&#13;
## 执行顺序&#13;
当一切本地修改好的内容push到远程github 仓库后&#13;
（这里的push指的是代码部分的push和tag的push，只有tag的push完成后，才会在后续生效，因为Gmeek.yml里面的clone source code逻辑部分，是依照tag的最新版本来生成的！）&#13;
&#13;
随后在repository：chanforwang.github.io下的Action，去build Gmeek即可！&#13;
&#13;
&#13;
## Remarks&#13;
发现一个很不错的音乐外链方式：Onedrive&#13;
1.将音乐MP3下载到本地&#13;
2.右击音乐，选中onedrive的share&#13;
3.copy link到https://onedrive.gimhoy.com/ ； 将share link转换为mp3 link&#13;
4.此link便是Gmeek仓库下&gt;template&gt;music.html里的音乐外链！&#13;
5.图片外链，直接用网易云音乐的缩图便可！。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/How%20to%20customize%20my%20personal%20blog.html</guid><pubDate>Sun, 14 Apr 2024 02:20:38 +0000</pubDate></item><item><title>待填的“坑”</title><link>https://ChanForWang.github.io/post/dai-tian-de-%E2%80%9C-keng-%E2%80%9D.html</link><description>- [ ] 如何避免因“稀缺Scarcity“导致的短视(行为、选择)，反之是“富余&amp;长期主义”&#13;
- Causing tunnel mindset；（e.g Deadline--Time is scarcity; Poor--Money is scarcity)&#13;
-https://www.mequilibrium.com/resources/how-to-escape-a-scarcity-mindset/&#13;
-https://cloud.tencent.com/developer/article/1199913&#13;
&#13;
- [ ] 总结“投资体系”&#13;
- 全面审视个人财务（债务，资产，现金流，主动收入，被动收入，保险配置详情--→做一个截止到2024.4snapshot；类似资产负债表）&#13;
- 记账→了解每月支出范围&#13;
- 厘清债务，去杠杆：1、房贷；2、美股贷款&#13;
- 第二部分：重点总结：投资体系（投机vs投资等理念）&#13;
&#13;
- [ ] 切实思考什么方式可以累积100w&#13;
- 细分，可执行的&#13;
&#13;
- [ ] 成长：如何管理时间：Timeboxing method； &#13;
- 将任务设置dealine时长（dealine是生产）&#13;
- 分轻重缓急&#13;
&#13;
- [ ] 保险的保额多少才够！（危疾、意外、医疗（实报实销）、人寿）。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/dai-tian-de-%E2%80%9C-keng-%E2%80%9D.html</guid><pubDate>Tue, 09 Apr 2024 01:49:44 +0000</pubDate></item><item><title>如何避免“中产返贫”</title><link>https://ChanForWang.github.io/post/ru-he-bi-mian-%E2%80%9C-zhong-chan-fan-pin-%E2%80%9D.html</link><description>自改革开放以来，无论是第一批下海经商的创业者，亦或是千禧年代乘着房地产东风扶摇直上的房产持有人，还是互联网新时代的弄潮儿，前前后后诞生了无数的中产，他们有幸凭借着自身的努力和时代的眷顾，积累了人生的第一笔财富，成为万千中产大员中的一份子。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/ru-he-bi-mian-%E2%80%9C-zhong-chan-fan-pin-%E2%80%9D.html</guid><pubDate>Sun, 07 Apr 2024 16:10:53 +0000</pubDate></item><item><title>Git的用处及用法</title><link>https://ChanForWang.github.io/post/Git-de-yong-chu-ji-yong-fa.html</link><description>## 简介&#13;
很开心，今天终于又又一次上线了自己小Blog，为什么说“又”，因为曾经自己可是从头到尾用Django折腾过一个专属的，奈何因为服务器的羊毛到期了，只能被迫下线，唯有最近偶然机遇发现Github Pages和便捷的Gmeek，可以轻松部署。</description><guid isPermaLink="true">https://ChanForWang.github.io/post/Git-de-yong-chu-ji-yong-fa.html</guid><pubDate>Thu, 28 Mar 2024 03:36:12 +0000</pubDate></item><item><title>About KH</title><link>https://ChanForWang.github.io/about.html</link><description>本人业余编程爱好者，喜欢折腾，建立本站目的是想记录和分享个人的各种点滴，以及方便回溯查看；&#13;
类似个人知识库的概念。</description><guid isPermaLink="true">https://ChanForWang.github.io/about.html</guid><pubDate>Tue, 11 Jun 2024 03:44:19 +0000</pubDate></item></channel></rss>